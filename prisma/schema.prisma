// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  password  String

  roles     Role[]     @relation("UserRoles")
  teamId    Int?
  team      Team?      @relation(fields: [teamId], references: [id])

  absences  Absence[]
  managedTeams Team[]  @relation("TeamManager")
  approvedAbsences Absence[] @relation("AbsenceApprover")

  notifications Notification[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique // e.g. "Gestionnaire", "Manager", "Salarie"
  users User[] @relation("UserRoles")
}

model Team {
  id       Int     @id @default(autoincrement())
  name     String

  managerId Int?
  manager   User?   @relation("TeamManager", fields: [managerId], references: [id])

  members  User[]
}

model Absence {
  id         Int       @id @default(autoincrement())
  type       String    // e.g. "conge paye", "RTT", "maladie"
  startDate  DateTime
  endDate    DateTime
  comment    String?
  status     String    @default("pending") // "pending", "approved", "refused"
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  userId     Int
  user       User      @relation(fields: [userId], references: [id])

  approverId Int?
  approver   User?     @relation("AbsenceApprover", fields: [approverId], references: [id])

  refusalComment String?
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String

  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}